name: Deploy to Kubernetes

# main 브랜치로 푸시될 때 자동 실행
on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: dustin-scan-backend
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 3. 의존성 설치
      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # 4. 빌드
      - name: Build applications
        run: npm run build

      # 5. Docker Buildx 설정 (multi-platform 빌드 지원)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 6. Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 7. Docker 이미지 빌드 & 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 8. Kubernetes 설정 (kubeconfig)
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      # 9. Kubernetes에 배포 (이미지 업데이트)
      - name: Deploy to Kubernetes
        run: |
          # Namespace 존재 확인 및 생성
          kubectl get namespace dustin-scan || kubectl create namespace dustin-scan

          # Kustomize로 YAML 적용 (production overlay)
          kubectl apply -k k8s/overlays/production

          # API Deployment 이미지 업데이트
          kubectl set image deployment/prod-api \
            api=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            -n dustin-scan

          # Indexer Deployment 이미지 업데이트
          kubectl set image deployment/prod-indexer \
            indexer=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            -n dustin-scan

          # Sync Deployment 이미지 업데이트
          kubectl set image deployment/prod-sync \
            sync=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} \
            -n dustin-scan

          # Rollout 상태 확인
          kubectl rollout status deployment/prod-api -n dustin-scan --timeout=5m
          kubectl rollout status deployment/prod-indexer -n dustin-scan --timeout=5m
          kubectl rollout status deployment/prod-sync -n dustin-scan --timeout=5m

      # 10. 배포 결과 확인
      - name: Verify deployment
        run: |
          echo "✅ Deployment completed successfully!"
          echo ""
          echo "📦 Pods status:"
          kubectl get pods -n dustin-scan
          echo ""
          echo "🚀 Services:"
          kubectl get services -n dustin-scan
          echo ""
          echo "📊 HPA status:"
          kubectl get hpa -n dustin-scan

      # 11. Slack 알림 (선택사항, Slack Webhook URL 설정 필요)
      # - name: Slack notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: |
      #       Deployment to Kubernetes ${{ job.status }}!
      #       Commit: ${{ github.sha }}
      #       Author: ${{ github.actor }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
